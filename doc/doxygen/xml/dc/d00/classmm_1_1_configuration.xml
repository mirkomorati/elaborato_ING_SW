<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd"
         version="1.8.13">
    <compounddef id="dc/d00/classmm_1_1_configuration" kind="class" language="C++" prot="public">
        <compoundname>mm::Configuration</compoundname>
        <includes refid="d1/d32/_configuration_8hpp" local="no">Configuration.hpp</includes>
        <sectiondef kind="private-static-attrib">
            <memberdef kind="variable" id="dc/d00/classmm_1_1_configuration_1a8dccac7a32ed403f2ad4889a6a5d594e"
                       prot="private" static="yes" mutable="no">
                <type>std::string</type>
                <definition>std::string mm::Configuration::config_file_name</definition>
                <argsstring></argsstring>
                <name>config_file_name</name>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="code/Configuration.hpp" line="38" column="1" bodyfile="code/Configuration.hpp"
                          bodystart="38" bodyend="-1"/>
            </memberdef>
            <memberdef kind="variable" id="dc/d00/classmm_1_1_configuration_1aca106c2a721a20e255c6d8e0065b8a2c"
                       prot="private" static="yes" mutable="no">
                <type>
                    <ref refid="dc/d00/classmm_1_1_configuration" kindref="compound">Configuration</ref>
                    *
                </type>
                <definition>mm::Configuration * mm::Configuration::instance</definition>
                <argsstring></argsstring>
                <name>instance</name>
                <initializer>= nullptr</initializer>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="code/Configuration.hpp" line="39" column="1" bodyfile="code/Configuration.hpp"
                          bodystart="39" bodyend="-1"/>
            </memberdef>
        </sectiondef>
        <sectiondef kind="private-attrib">
            <memberdef kind="variable" id="dc/d00/classmm_1_1_configuration_1a08825788b15157f02b89764197c7e1d0"
                       prot="private" static="no" mutable="no">
                <type>
                    <ref refid="d1/d32/_configuration_8hpp_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json
                    </ref>
                </type>
                <definition>json mm::Configuration::config</definition>
                <argsstring></argsstring>
                <name>config</name>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="code/Configuration.hpp" line="41" column="1" bodyfile="code/Configuration.hpp"
                          bodystart="41" bodyend="-1"/>
            </memberdef>
        </sectiondef>
        <sectiondef kind="private-func">
            <memberdef kind="function" id="dc/d00/classmm_1_1_configuration_1ab0a2d79f7deee49d16fb788c88e228d9"
                       prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type></type>
                <definition>mm::Configuration::Configuration</definition>
                <argsstring>() noexcept(false)</argsstring>
                <name>Configuration</name>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="code/Configuration.hpp" line="44" column="1" bodyfile="code/Configuration.cpp"
                          bodystart="10" bodyend="20"/>
            </memberdef>
            <memberdef kind="function" id="dc/d00/classmm_1_1_configuration_1a97da12ef9d53614d68144d17a6e35ed0"
                       prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type></type>
                <definition>mm::Configuration::~Configuration</definition>
                <argsstring>()</argsstring>
                <name>~Configuration</name>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="code/Configuration.hpp" line="46" column="1" bodyfile="code/Configuration.cpp"
                          bodystart="40" bodyend="42"/>
            </memberdef>
        </sectiondef>
        <sectiondef kind="public-func">
            <memberdef kind="function" id="dc/d00/classmm_1_1_configuration_1a71e5c0e1ad7d82d6a14895a4e85d83b7"
                       prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type></type>
                <definition>mm::Configuration::Configuration</definition>
                <argsstring>(const Configuration &amp;old)=delete</argsstring>
                <name>Configuration</name>
                <param>
                    <type>const <ref refid="dc/d00/classmm_1_1_configuration" kindref="compound">Configuration</ref> &amp;
                    </type>
                    <declname>old</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="code/Configuration.hpp" line="50" column="1"/>
            </memberdef>
            <memberdef kind="function" id="dc/d00/classmm_1_1_configuration_1a3077aebf459758dce4be716a8ddcb090"
                       prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>const <ref refid="dc/d00/classmm_1_1_configuration" kindref="compound">Configuration</ref> &amp;
                </type>
                <definition>const Configuration&amp; mm::Configuration::operator=</definition>
                <argsstring>(const Configuration &amp;old)=delete</argsstring>
                <name>operator=</name>
                <param>
                    <type>const <ref refid="dc/d00/classmm_1_1_configuration" kindref="compound">Configuration</ref> &amp;
                    </type>
                    <declname>old</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="code/Configuration.hpp" line="52" column="1"/>
            </memberdef>
            <memberdef kind="function" id="dc/d00/classmm_1_1_configuration_1a30374c407050b9fb3f05dd3c2c01202d"
                       prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
                <templateparamlist>
                    <param>
                        <type>typename T</type>
                    </param>
                </templateparamlist>
                <type>T</type>
                <definition>T mm::Configuration::get</definition>
                <argsstring>(const std::string &amp;key) const noexcept(false)</argsstring>
                <name>get</name>
                <param>
                    <type>const std::string &amp;</type>
                    <declname>key</declname>
                </param>
                <briefdescription>
                    <para>Cerca nel file json la chiave <computeroutput>key</computeroutput>, se questa non viene
                        trovata lancia l&apos;apposita eccezione altrimenti ritorna l&apos;oggetto corrispondente a <computeroutput>
                            key
                        </computeroutput> nel file.
                    </para>
                </briefdescription>
                <detaileddescription>
                    <para>N.B. <computeroutput>T</computeroutput> deve essere corrispondente al tipo di dato nel json,
                        altrimenti sar√† lanciata un eccezione.
                    </para>
                    <para>
                        <parameterlist kind="templateparam">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>T</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Tipo del dato di configurazione</para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>key</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Chiave da cercare nel file</para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Oggetto di tipo <computeroutput>T</computeroutput> contenente i dati presenti nel file
                                json alla chiave
                                <computeroutput>key</computeroutput>
                            </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="code/Configuration.hpp" line="93" column="1" bodyfile="code/Configuration.hpp"
                          bodystart="93" bodyend="100"/>
            </memberdef>
        </sectiondef>
        <sectiondef kind="public-static-func">
            <memberdef kind="function" id="dc/d00/classmm_1_1_configuration_1a5cfc5ea56062f53ef9fbd274f6dbe79e"
                       prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>
                    <ref refid="dc/d00/classmm_1_1_configuration" kindref="compound">Configuration</ref> &amp;
                </type>
                <definition>mm::Configuration &amp; mm::Configuration::get_instance</definition>
                <argsstring>() noexcept(false)</argsstring>
                <name>get_instance</name>
                <briefdescription>
                    <para>Ritorna una reference ad un&apos;istanza di tipo
                        <computeroutput>
                            <ref refid="dc/d00/classmm_1_1_configuration" kindref="compound">Configuration</ref>
                        </computeroutput>
                        .
                    </para>
                </briefdescription>
                <detaileddescription>
                    <para>Questa funzione non deve mai essere chiamata se prima non √® stato chiamato (almeno una volta)
                        il metodo <ref refid="dc/d00/classmm_1_1_configuration_1ad526b28d1a7f8c6f854352b840d2d7b4"
                                       kindref="member">Configuration::set_config_file_name()</ref>.
                    </para>
                    <para>N.B. Essendo il distruttore privato non √® possibile cancellare l&apos;oggetto al di fuori di
                        questa classe
                    </para>
                    <para>
                        <simplesect kind="return">
                            <para>Istanza di
                                <ref refid="dc/d00/classmm_1_1_configuration" kindref="compound">
                                    Configuration
                                </ref>
                            </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="code/Configuration.hpp" line="64" column="1" bodyfile="code/Configuration.cpp"
                          bodystart="22" bodyend="26"/>
            </memberdef>
            <memberdef kind="function" id="dc/d00/classmm_1_1_configuration_1a631c8525beb91fb55d72eb6b58d2d68f"
                       prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>const std::string &amp;</type>
                <definition>const std::string &amp; mm::Configuration::get_config_file_name</definition>
                <argsstring>()</argsstring>
                <name>get_config_file_name</name>
                <briefdescription>
                    <para>Ritorna una stringa contente il path dove viene cercato cercato il file json.</para>
                </briefdescription>
                <detaileddescription>
                    <para>
                        <simplesect kind="return">
                            <para>Il path del file di configurazione</para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="code/Configuration.hpp" line="71" column="1" bodyfile="code/Configuration.cpp"
                          bodystart="28" bodyend="30"/>
            </memberdef>
            <memberdef kind="function" id="dc/d00/classmm_1_1_configuration_1ad526b28d1a7f8c6f854352b840d2d7b4"
                       prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void mm::Configuration::set_config_file_name</definition>
                <argsstring>(const std::string &amp;config_file_name)</argsstring>
                <name>set_config_file_name</name>
                <param>
                    <type>const std::string &amp;</type>
                    <declname>config_file_name</declname>
                </param>
                <briefdescription>
                    <para>Serve per impostare il path dove trovare il file di configurazione.</para>
                </briefdescription>
                <detaileddescription>
                    <para>N.B. Questa funzione <bold>deve</bold> sempre essere chiamata prima di una qualsiasi chiamata
                        a
                        <ref refid="dc/d00/classmm_1_1_configuration_1a5cfc5ea56062f53ef9fbd274f6dbe79e"
                             kindref="member">Configuration::get_instance
                        </ref>
                    </para>
                    <para>
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername direction="in">config_file_name</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Una stringa contenente il path dove trovare il file</para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="code/Configuration.hpp" line="80" column="1" bodyfile="code/Configuration.cpp"
                          bodystart="33" bodyend="38"/>
            </memberdef>
        </sectiondef>
        <briefdescription>
            <para>Singleton che mantiene le configurazioni dell&apos;intera applicazione.</para>
        </briefdescription>
        <detaileddescription>
            <para>I parametri di configurazione dell&apos;applicazione devono essere salvati in un file in formato json.
                La classe si occupa sia di leggere che di fornire un&apos;interfaccia semplice per ottenere un parametro
                dal file
            </para>
        </detaileddescription>
        <collaborationgraph>
            <node id="25">
                <label>mm::Configuration</label>
                <link refid="dc/d00/classmm_1_1_configuration"/>
            </node>
        </collaborationgraph>
        <location file="code/Configuration.hpp" line="36" column="1" bodyfile="code/Configuration.hpp" bodystart="36"
                  bodyend="102"/>
        <listofallmembers>
            <member refid="dc/d00/classmm_1_1_configuration_1a08825788b15157f02b89764197c7e1d0" prot="private"
                    virt="non-virtual">
                <scope>mm::Configuration</scope>
                <name>config</name>
            </member>
            <member refid="dc/d00/classmm_1_1_configuration_1a8dccac7a32ed403f2ad4889a6a5d594e" prot="private"
                    virt="non-virtual">
                <scope>mm::Configuration</scope>
                <name>config_file_name</name>
            </member>
            <member refid="dc/d00/classmm_1_1_configuration_1ab0a2d79f7deee49d16fb788c88e228d9" prot="private"
                    virt="non-virtual">
                <scope>mm::Configuration</scope>
                <name>Configuration</name>
            </member>
            <member refid="dc/d00/classmm_1_1_configuration_1a71e5c0e1ad7d82d6a14895a4e85d83b7" prot="public"
                    virt="non-virtual">
                <scope>mm::Configuration</scope>
                <name>Configuration</name>
            </member>
            <member refid="dc/d00/classmm_1_1_configuration_1a30374c407050b9fb3f05dd3c2c01202d" prot="public"
                    virt="non-virtual">
                <scope>mm::Configuration</scope>
                <name>get</name>
            </member>
            <member refid="dc/d00/classmm_1_1_configuration_1a631c8525beb91fb55d72eb6b58d2d68f" prot="public"
                    virt="non-virtual">
                <scope>mm::Configuration</scope>
                <name>get_config_file_name</name>
            </member>
            <member refid="dc/d00/classmm_1_1_configuration_1a5cfc5ea56062f53ef9fbd274f6dbe79e" prot="public"
                    virt="non-virtual">
                <scope>mm::Configuration</scope>
                <name>get_instance</name>
            </member>
            <member refid="dc/d00/classmm_1_1_configuration_1aca106c2a721a20e255c6d8e0065b8a2c" prot="private"
                    virt="non-virtual">
                <scope>mm::Configuration</scope>
                <name>instance</name>
            </member>
            <member refid="dc/d00/classmm_1_1_configuration_1a3077aebf459758dce4be716a8ddcb090" prot="public"
                    virt="non-virtual">
                <scope>mm::Configuration</scope>
                <name>operator=</name>
            </member>
            <member refid="dc/d00/classmm_1_1_configuration_1ad526b28d1a7f8c6f854352b840d2d7b4" prot="public"
                    virt="non-virtual">
                <scope>mm::Configuration</scope>
                <name>set_config_file_name</name>
            </member>
            <member refid="dc/d00/classmm_1_1_configuration_1a97da12ef9d53614d68144d17a6e35ed0" prot="private"
                    virt="non-virtual">
                <scope>mm::Configuration</scope>
                <name>~Configuration</name>
            </member>
        </listofallmembers>
    </compounddef>
</doxygen>
